Operating-system-level virtualization has been the hottest topic in Computer System and Cloud Computing. Docker is the most popular implementation of operating-system-level virtualization, it allows the programmers to build, ship and run their applications easily. Docker is hosted on Github, with 31256 stars by Mar 16th, 2016. Since Docker is now generally acceptable, there are many services and tools based on it. Kubernetes is a open-source system for automating deployment, operations, and scaling of containerized applications. The ecosystem of Docker is growing up rapidly.

Fornax is a release management system, which is built on Docker. Fornax aims to provide the continuous integration, continuous deployment and version control of microservices. 

Continuous integration is a main feature in Fornax. Every time the programmers push their local changes to the remote repositoryï¼Œ which is taken over by a specific version control system, such as Git or SVN, Fornax would create a continous integration task and run the customized commands. And Fornax is designed to integrate with popular CI tool like jenkins, to facilitate existing infrastructure. 

Continuous deployment is a important software engineering approach to agile software development. Fornax integrates with Kubernetes, to deploy microservices. When the integration test passed, Fornax would build a conatiner image from the commit, push it to registry, and deploy it to the container cluster. And Fornax allows to declare which cluster and which partition to deploy, and support to deploy on multiple cloud architectures such as public cloud, private cloud or hybrid cloud. The deployment cloud be flexible.

Those two features make the Fornax a available continuous integration or continuous deployment tool, and the support for version control of microservices makes Fornax meet the demand of the modern software process. Repository in the traditional version control system is equivalent to a service in Fornax. Fornax would take over the version control of the programmers' application. So Fornax integrates with version control systems and Docker image service to make both code and runtime of the applications traceable and able to roll back.

There are two concept in Fornax, service and version. Service is equivalent to a repository in the version control system. And version contains the code by a commit and a Docker image built from the code. A service would have more than one version, and the version could deploy to Kubernetes cluster. Fornax has a reasonable workflow, First The programmers should input the necessary information, including the URL of repository, the type of verson control system and the token for authorization if needed. Fornax would create a service for the repository, and check whether the information is correct. When the service is created successfully, Fornax would take over the version control of the service. When a commit is pushed to remote repository, Fornax would start a continuous integration task. If the task passes, Fornax would build a Docker image from the code, push it to the customized Docker Registry and store the information of the version. If the programmers have defined the settings about continuous deployment, Fornax would deploy the new version to user-defined cluster. From the perspective of programmers, they just need to push their commit to remote, and Fornax will take over the continuous intergation, version control and continuous deployment.

Fornax has eight components: API module, async event manager, Docker manager, version control system manager(VCS manager), continuous integration manager(CI manager), Docker Daemon manager, log module, and datebase collection manager. 

API module wraps the Fornax as REST API. Fornax run as a HTTP server, listening a specific port. All the requests would reach the API module first and API module would filter the requests, ensure the requests are valid, then would handle the requests. It's a lot of time to create services or versions, so it is asynchronous. When API module receives the requests to create services or versions, it would send a event to async event manager.

Async event manager schedules the event queue, it receives the events sent from API module, and handle these events asynchronously. There are two kinds of events: create services and create versions. Async event manager uses channels, the feature in golang, to perform a event loop. And it will integrates with Docker manager, CI manager and VCS manager to deal with the two kinds of events.

Docker manager is a wrapper around Docker Client. Fornax would build and push the image to Docker Registry by Docker manager. And To push the image isolatedly, Fornax implements Docker Daemon manager to manages multiple Docker manager. When async event manager should call Docker manager to push the image, it would acquire a idle Docker manager from Docker Daemon manger, then push the image to Docker Registry.

VCS manager is a wrapper around the version control systems, Continuous integration requires some VCS operations, so Fornax need to import the VCS bundle. Now VCS manager supports Git and SVN, and in the future, other version control systems would be adapted.

CI manager is the most important module in Fornax. CI manager take over the life cycle of a version, from continuous integration and deployment. First, CI manager would check whether the file named caicloud.yml exists. The file is the config during creating version process. It defines the operations that should be executed when the version is created. If the file doesn't exists, the CI manager wouldn't work, and Fornax just builds and pushes docker image to Docker Registry. Then CI manager parses the config file, and run continuous integration, before-build-hook, build, push, post-build-hook and deploy one by one. 

At the continuous integration step, CI manager would run the dependencies and the service as containers, these containers would communicate with each other via DNS name resolution. CI manager promises that the containers in one request would discover each other, but containers in different requests could do that. 

At the before-build-hook and post-build-hook step, CI manager would run a single container, and execute the customized commands. Fornax supports the hooks to improve usability.

Build and push are two default steps in Fornax. A version could have some optional steps to run, such as continuous integration or before-build-hook, and two default steps, build and push. In these two steps, Fornax would build the docker image, and push it to Docker Registry.

CI manager is a monolithic module, and in the future, CI manager would be refactored.

log module is another module, which is focuing on logs during the version creating process. At first, Fornax stores logs locally. With the increase of throughput, Fornax shuold be deployed as a distributed application. So log module imports Kafka, an open source messaging system, to store logs in the distributed architecture. And log module communicates with the clients by WebSocket, WebSocket allows Fornax to push real-time logs to client.

Datebase collection manager wraps the connection to MongoDB, Fornax would store the services and versions into MongoDB by database collection manager. It's a global module exposed to all other modules.

To avoid serious bugs, Fornax has many sound test cases. There are 11 test cases about services and 24 test cases about versions. The test cases are end-to-end, and covers the main workflow of Fornax and some alternative flow. These test cases help us keep the code in high quality.

And with the growth of throughput, Fornax imports HAProxy, an open source load balancer to distribute. Fornax is designed to stateless, so the requests could route to an arbitrary Fornax instance. Distributed architecture improves the availability, makes Fornax production-ready.

Although Fornax is production-ready, it also has a lot of problems to solve, especially in CI manager and log module. In some situation, CI manager could recycle the containers and the network, which would cause the resource leak. And log module now is not stable enough, in the future, Fornax would fix these problems to make it much more robust.